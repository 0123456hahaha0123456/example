plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = 11
targetCompatibility = 11

// Configure group ID, artifact ID, and version
group = "io.github.0123456hahaha0123456"
archivesBaseName = "example"
version = "1.0.2"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        // Specify relocation POM
        relocation(MavenPublication) {
            pom {
                // Old artifact coordinates
                groupId = "io.github.0123456hahaha0123456"
                artifactId = "example"
                version = "1.0.1"

                distributionManagement {
                    relocation {
                        // New artifact coordinates
                        groupId = "io.github.0123456hahaha0123456"
                        artifactId = "example"
                        version = "1.0.2"
                        message = "version has been changed"
                    }
                }
            }
        }

        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'My example'
                description = 'A example of publishing maven central'
                url = 'https://github.com/0123456hahaha0123456/example'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'duc.trantrung'
                        name = 'Duc Tran'
                        email = 'ductran.tpc@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/0123456hahaha0123456/example.git'
                    developerConnection = 'scm:git:ssh://git@github.com/0123456hahaha0123456/example.git'
                    url = 'https://github.com/0123456hahaha0123456/example'
                }
            }
        }
    }

    repositories {
        maven{
            def releasesRepoUrl= 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl= 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.property("nexusUsername")
                password = project.property("nexusPassword")
            }
        }
    }
//    repositories {
//        mavenDeployer {
////            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
//
//            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
//                authentication(userName: project.property("nexusUsername"), password: project.property("nexusPassword"))
//            }
//
//            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
//                authentication(userName: project.property("nexusUsername"), password: project.property("nexusPassword"))
//            }
////        url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
////        credentials {
////            username = project.property("nexusUsername")
////            password = project.property("nexusPassword")
////        }
////
////
////        url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
////        credentials {
////            username = project.property("nexusUsername")
////            password = project.property("nexusPassword")
////        }
//
//
//            maven {
//                def releasesRepoUrl = "$buildDir/repos/releases"
//                def snapshotsRepoUrl = "$buildDir/repos/snapshots"
////            def releasesRepoUrl = layout.buildDirectory.dir('repos/release')
////            def snapshotsRepoUrl = layout.buildDirectory.dir('repos /snapshot')
//                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
//            }
//        }
//    }
}

signing {
//    useGpgCmd()
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava11Compatible()) {
        options.addBooleanOption('html5', true)
    }
}